python scapy for endianess
Client cant send 

Problem Statement: A Banking interface. 
Needs:
  Super good reliability
  Never loose/corrupt data
  Basic Banking transactions
Maybe:
  Transaction Speed
  Interface never gets in the way of the user

High Level Overview:
  Server:
    Listens
    Verifies ID
    Modifies Database
    Sends Balance/Error code
=TAN(ASIN(F6/G4))/F6
  Client:
    Records input
    Sends requests
    Listens
    Prints

Lower level description:
SERVER
+--------+
| Listen |
+--------+
   |
 Queue
   |
+--v--------------------+ 
| Unpacking             |               +-------------+
| ID Verification <----------->Log<-----| Log Cleaner |
| Database Modification <--> Database   +-------------+
| Packaging             |
| Send                  |  
+-----------------------+

CLIENT
+-----------+      +-------------+
| Input     |   +--> Log Cleaner |
| Packaging ----+  +----|--------+
| Send      |   |       v 
+---^-------+   +<---> Log
    |     
+---v-------+ 
| Listen    |
| Unpacking |
| Print     |
+-----------+

CLIENT:
  Log: This file shows the timestamp and port of previously sent packages. Before declaring the timestamp, this file is checked and the client's send & listen port might have to change so that all port-timestamp pairs are unique. After this file is checked, Log Clearner is run
  Log Cleaner: Deletes lines from the log that are > 1 second old. Since the entries are sequencial, this only reads from the beginning to the first not-old entry.
  Send: Handles Dropped packets by resending every 20 seconds 6 times if there's no reply (timestamp is not changed). After the first send, this program forks for the listen process while continuing to run in the background. If there's no reply after all sends, either this process kills the listener and prints the error, or signals the listener to stop with an error.
  Listen: Once a response is received, this kills the send process.
  Print Output: Handles error codes

SERVER:
  Queue: 2d byte array. Listen appends to this unless the queue is full. In that case an error is passed to Packaging. Unpacking deletes from the beginning.
  ID Verification: If the request is to open an account, the database assigns it the latest unused userID. Elsewise it matches the given username to a database entry. This also checks the log for repeated requests(first checking that Log cleaner is not using the file). Repeated requests are only re-logged, deleting their old :log entry.
  Log: Stores requests in an array of datatype: (username, timestamp) Stores requests until 120 seconds after the timestamp
  Log Cleaner: Launched in the background as part of the server startup. Runs every 10 seconds.
  Packaging: Any module before this can skip directly to here with and error code >1.
  Send: uses the ip address and port of the client who's request its processing. 

CLIENT OPTION
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          Option Class         |      Type     |R|R|R| Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       User ID                                 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          Timestamp                                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       
|  Action         |      Value                                  |
+-+-+-+-+-+-+-+-+-+                                             |
~                                                               ~
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
Actions:
  0 = Check Balance (no options)
  1 = Widthdraw ()
  2 = Deposit (option: int)
  3 = Open Accout (possibly an option for a password hash)

Timestamp: Seconds since midnight UT

Value: An integer amount of cents to be interpreted based on the action. Stored in little endian format in case the length is accidentally made too large.
  Check Balance = null
  Withdraw = Amount to withdraw
  Deposit = Amount to deposit
  Open Account = Amount to deposit


SERVER OPTION
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          Option Class         |   Type        |R|R|R| Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       User ID                                 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                 Timestamp                                     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| error code      |                     balance                 |
+-+-+-+-+-+-+-+-+-+                                             +
|                                                               | 
~                                                               ~
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
Error Codes:
  0 = Sucess
  1 = Balance
  other int= converted to error message by client

Balance: This is null/zero if the error code isn't 1. Stored exactly the same as the Value
